<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: opencensus/proto/trace/v1/trace.proto

namespace Opencensus\Proto\Trace\V1\Span\TimeEvent;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * An event describing a message sent/received between Spans.
 *
 * Generated from protobuf message <code>opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent</code>
 */
class MessageEvent extends \Google\Protobuf\Internal\Message
{
    /**
     * The type of MessageEvent. Indicates whether the message was sent or
     * received.
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type type = 1;</code>
     */
    private $type = 0;
    /**
     * An identifier for the MessageEvent's message that can be used to match
     * SENT and RECEIVED MessageEvents. For example, this field could
     * represent a sequence ID for a streaming RPC. It is recommended to be
     * unique within a Span.
     *
     * Generated from protobuf field <code>uint64 id = 2;</code>
     */
    private $id = 0;
    /**
     * The number of uncompressed bytes sent or received.
     *
     * Generated from protobuf field <code>uint64 uncompressed_size = 3;</code>
     */
    private $uncompressed_size = 0;
    /**
     * The number of compressed bytes sent or received. If zero, assumed to
     * be the same size as uncompressed.
     *
     * Generated from protobuf field <code>uint64 compressed_size = 4;</code>
     */
    private $compressed_size = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $type
     *           The type of MessageEvent. Indicates whether the message was sent or
     *           received.
     *     @type int|string $id
     *           An identifier for the MessageEvent's message that can be used to match
     *           SENT and RECEIVED MessageEvents. For example, this field could
     *           represent a sequence ID for a streaming RPC. It is recommended to be
     *           unique within a Span.
     *     @type int|string $uncompressed_size
     *           The number of uncompressed bytes sent or received.
     *     @type int|string $compressed_size
     *           The number of compressed bytes sent or received. If zero, assumed to
     *           be the same size as uncompressed.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Opencensus\Proto\Trace\V1\Trace::initOnce();
        parent::__construct($data);
    }

    /**
     * The type of MessageEvent. Indicates whether the message was sent or
     * received.
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type type = 1;</code>
     * @return int
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * The type of MessageEvent. Indicates whether the message was sent or
     * received.
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type type = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setType($var)
    {
        GPBUtil::checkEnum($var, \Opencensus\Proto\Trace\V1\Span_TimeEvent_MessageEvent_Type::class);
        $this->type = $var;

        return $this;
    }

    /**
     * An identifier for the MessageEvent's message that can be used to match
     * SENT and RECEIVED MessageEvents. For example, this field could
     * represent a sequence ID for a streaming RPC. It is recommended to be
     * unique within a Span.
     *
     * Generated from protobuf field <code>uint64 id = 2;</code>
     * @return int|string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * An identifier for the MessageEvent's message that can be used to match
     * SENT and RECEIVED MessageEvents. For example, this field could
     * represent a sequence ID for a streaming RPC. It is recommended to be
     * unique within a Span.
     *
     * Generated from protobuf field <code>uint64 id = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setId($var)
    {
        GPBUtil::checkUint64($var);
        $this->id = $var;

        return $this;
    }

    /**
     * The number of uncompressed bytes sent or received.
     *
     * Generated from protobuf field <code>uint64 uncompressed_size = 3;</code>
     * @return int|string
     */
    public function getUncompressedSize()
    {
        return $this->uncompressed_size;
    }

    /**
     * The number of uncompressed bytes sent or received.
     *
     * Generated from protobuf field <code>uint64 uncompressed_size = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setUncompressedSize($var)
    {
        GPBUtil::checkUint64($var);
        $this->uncompressed_size = $var;

        return $this;
    }

    /**
     * The number of compressed bytes sent or received. If zero, assumed to
     * be the same size as uncompressed.
     *
     * Generated from protobuf field <code>uint64 compressed_size = 4;</code>
     * @return int|string
     */
    public function getCompressedSize()
    {
        return $this->compressed_size;
    }

    /**
     * The number of compressed bytes sent or received. If zero, assumed to
     * be the same size as uncompressed.
     *
     * Generated from protobuf field <code>uint64 compressed_size = 4;</code>
     * @param int|string $var
     * @return $this
     */
    public function setCompressedSize($var)
    {
        GPBUtil::checkUint64($var);
        $this->compressed_size = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(MessageEvent::class, \Opencensus\Proto\Trace\V1\Span_TimeEvent_MessageEvent::class);

