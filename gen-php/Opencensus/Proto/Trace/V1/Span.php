<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: opencensus/proto/trace/v1/trace.proto

namespace Opencensus\Proto\Trace\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * A span represents a single operation within a trace. Spans can be
 * nested to form a trace tree. Spans may also be linked to other spans
 * from the same or different trace. And form graphs. Often, a trace
 * contains a root span that describes the end-to-end latency, and one
 * or more subspans for its sub-operations. A trace can also contain
 * multiple root spans, or none at all. Spans do not need to be
 * contiguous - there may be gaps or overlaps between spans in a trace.
 * The next id is 17.
 * TODO(bdrutu): Add an example.
 *
 * Generated from protobuf message <code>opencensus.proto.trace.v1.Span</code>
 */
class Span extends \Google\Protobuf\Internal\Message
{
    /**
     * A unique identifier for a trace. All spans from the same trace share
     * the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes
     * is considered invalid.
     * This field is semantically required. Receiver should generate new
     * random trace_id if empty or invalid trace_id was received.
     * This field is required.
     *
     * Generated from protobuf field <code>bytes trace_id = 1;</code>
     */
    private $trace_id = '';
    /**
     * A unique identifier for a span within a trace, assigned when the span
     * is created. The ID is an 8-byte array. An ID with all zeroes is considered
     * invalid.
     * This field is semantically required. Receiver should generate new
     * random span_id if empty or invalid span_id was received.
     * This field is required.
     *
     * Generated from protobuf field <code>bytes span_id = 2;</code>
     */
    private $span_id = '';
    /**
     * The Tracestate on the span.
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.Span.Tracestate tracestate = 15;</code>
     */
    private $tracestate = null;
    /**
     * The `span_id` of this span's parent span. If this is a root span, then this
     * field must be empty. The ID is an 8-byte array.
     *
     * Generated from protobuf field <code>bytes parent_span_id = 3;</code>
     */
    private $parent_span_id = '';
    /**
     * A description of the span's operation.
     * For example, the name can be a qualified method name or a file name
     * and a line number where the operation is called. A best practice is to use
     * the same display name at the same call point in an application.
     * This makes it easier to correlate spans in different traces.
     * This field is semantically required to be set to non-empty string.
     * When null or empty string received - receiver may use string "name"
     * as a replacement. There might be smarted algorithms implemented by
     * receiver to fix the empty span name.
     * This field is required.
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.TruncatableString name = 4;</code>
     */
    private $name = null;
    /**
     * Distinguishes between spans generated in a particular context. For example,
     * two spans with the same name may be distinguished using `CLIENT` (caller)
     * and `SERVER` (callee) to identify queueing latency associated with the span.
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.Span.SpanKind kind = 14;</code>
     */
    private $kind = 0;
    /**
     * The start time of the span. On the client side, this is the time kept by
     * the local machine where the span execution starts. On the server side, this
     * is the time when the server's application handler starts running.
     * This field is semantically required. When not set on receive -
     * receiver should set it to the value of end_time field if it was
     * set. Or to the current time if neither was set. It is important to
     * keep end_time > start_time for consistency.
     * This field is required.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp start_time = 5;</code>
     */
    private $start_time = null;
    /**
     * The end time of the span. On the client side, this is the time kept by
     * the local machine where the span execution ends. On the server side, this
     * is the time when the server application handler stops running.
     * This field is semantically required. When not set on receive -
     * receiver should set it to start_time value. It is important to
     * keep end_time > start_time for consistency.
     * This field is required.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp end_time = 6;</code>
     */
    private $end_time = null;
    /**
     * A set of attributes on the span.
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 7;</code>
     */
    private $attributes = null;
    /**
     * A stack trace captured at the start of the span.
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.StackTrace stack_trace = 8;</code>
     */
    private $stack_trace = null;
    /**
     * The included time events.
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.Span.TimeEvents time_events = 9;</code>
     */
    private $time_events = null;
    /**
     * The included links.
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.Span.Links links = 10;</code>
     */
    private $links = null;
    /**
     * An optional final status for this span. Semantically when Status
     * wasn't set it is means span ended without errors and assume
     * Status.Ok (code = 0).
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.Status status = 11;</code>
     */
    private $status = null;
    /**
     * An optional resource that is associated with this span. If not set, this span 
     * should be part of a batch that does include the resource information, unless resource 
     * information is unknown.
     *
     * Generated from protobuf field <code>.opencensus.proto.resource.v1.Resource resource = 16;</code>
     */
    private $resource = null;
    /**
     * A highly recommended but not required flag that identifies when a
     * trace crosses a process boundary. True when the parent_span belongs
     * to the same process as the current span. This flag is most commonly
     * used to indicate the need to adjust time as clocks in different
     * processes may not be synchronized.
     *
     * Generated from protobuf field <code>.google.protobuf.BoolValue same_process_as_parent_span = 12;</code>
     */
    private $same_process_as_parent_span = null;
    /**
     * An optional number of child spans that were generated while this span
     * was active. If set, allows an implementation to detect missing child spans.
     *
     * Generated from protobuf field <code>.google.protobuf.UInt32Value child_span_count = 13;</code>
     */
    private $child_span_count = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $trace_id
     *           A unique identifier for a trace. All spans from the same trace share
     *           the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes
     *           is considered invalid.
     *           This field is semantically required. Receiver should generate new
     *           random trace_id if empty or invalid trace_id was received.
     *           This field is required.
     *     @type string $span_id
     *           A unique identifier for a span within a trace, assigned when the span
     *           is created. The ID is an 8-byte array. An ID with all zeroes is considered
     *           invalid.
     *           This field is semantically required. Receiver should generate new
     *           random span_id if empty or invalid span_id was received.
     *           This field is required.
     *     @type \Opencensus\Proto\Trace\V1\Span\Tracestate $tracestate
     *           The Tracestate on the span.
     *     @type string $parent_span_id
     *           The `span_id` of this span's parent span. If this is a root span, then this
     *           field must be empty. The ID is an 8-byte array.
     *     @type \Opencensus\Proto\Trace\V1\TruncatableString $name
     *           A description of the span's operation.
     *           For example, the name can be a qualified method name or a file name
     *           and a line number where the operation is called. A best practice is to use
     *           the same display name at the same call point in an application.
     *           This makes it easier to correlate spans in different traces.
     *           This field is semantically required to be set to non-empty string.
     *           When null or empty string received - receiver may use string "name"
     *           as a replacement. There might be smarted algorithms implemented by
     *           receiver to fix the empty span name.
     *           This field is required.
     *     @type int $kind
     *           Distinguishes between spans generated in a particular context. For example,
     *           two spans with the same name may be distinguished using `CLIENT` (caller)
     *           and `SERVER` (callee) to identify queueing latency associated with the span.
     *     @type \Google\Protobuf\Timestamp $start_time
     *           The start time of the span. On the client side, this is the time kept by
     *           the local machine where the span execution starts. On the server side, this
     *           is the time when the server's application handler starts running.
     *           This field is semantically required. When not set on receive -
     *           receiver should set it to the value of end_time field if it was
     *           set. Or to the current time if neither was set. It is important to
     *           keep end_time > start_time for consistency.
     *           This field is required.
     *     @type \Google\Protobuf\Timestamp $end_time
     *           The end time of the span. On the client side, this is the time kept by
     *           the local machine where the span execution ends. On the server side, this
     *           is the time when the server application handler stops running.
     *           This field is semantically required. When not set on receive -
     *           receiver should set it to start_time value. It is important to
     *           keep end_time > start_time for consistency.
     *           This field is required.
     *     @type \Opencensus\Proto\Trace\V1\Span\Attributes $attributes
     *           A set of attributes on the span.
     *     @type \Opencensus\Proto\Trace\V1\StackTrace $stack_trace
     *           A stack trace captured at the start of the span.
     *     @type \Opencensus\Proto\Trace\V1\Span\TimeEvents $time_events
     *           The included time events.
     *     @type \Opencensus\Proto\Trace\V1\Span\Links $links
     *           The included links.
     *     @type \Opencensus\Proto\Trace\V1\Status $status
     *           An optional final status for this span. Semantically when Status
     *           wasn't set it is means span ended without errors and assume
     *           Status.Ok (code = 0).
     *     @type \Opencensus\Proto\Resource\V1\Resource $resource
     *           An optional resource that is associated with this span. If not set, this span 
     *           should be part of a batch that does include the resource information, unless resource 
     *           information is unknown.
     *     @type \Google\Protobuf\BoolValue $same_process_as_parent_span
     *           A highly recommended but not required flag that identifies when a
     *           trace crosses a process boundary. True when the parent_span belongs
     *           to the same process as the current span. This flag is most commonly
     *           used to indicate the need to adjust time as clocks in different
     *           processes may not be synchronized.
     *     @type \Google\Protobuf\UInt32Value $child_span_count
     *           An optional number of child spans that were generated while this span
     *           was active. If set, allows an implementation to detect missing child spans.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Opencensus\Proto\Trace\V1\Trace::initOnce();
        parent::__construct($data);
    }

    /**
     * A unique identifier for a trace. All spans from the same trace share
     * the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes
     * is considered invalid.
     * This field is semantically required. Receiver should generate new
     * random trace_id if empty or invalid trace_id was received.
     * This field is required.
     *
     * Generated from protobuf field <code>bytes trace_id = 1;</code>
     * @return string
     */
    public function getTraceId()
    {
        return $this->trace_id;
    }

    /**
     * A unique identifier for a trace. All spans from the same trace share
     * the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes
     * is considered invalid.
     * This field is semantically required. Receiver should generate new
     * random trace_id if empty or invalid trace_id was received.
     * This field is required.
     *
     * Generated from protobuf field <code>bytes trace_id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setTraceId($var)
    {
        GPBUtil::checkString($var, False);
        $this->trace_id = $var;

        return $this;
    }

    /**
     * A unique identifier for a span within a trace, assigned when the span
     * is created. The ID is an 8-byte array. An ID with all zeroes is considered
     * invalid.
     * This field is semantically required. Receiver should generate new
     * random span_id if empty or invalid span_id was received.
     * This field is required.
     *
     * Generated from protobuf field <code>bytes span_id = 2;</code>
     * @return string
     */
    public function getSpanId()
    {
        return $this->span_id;
    }

    /**
     * A unique identifier for a span within a trace, assigned when the span
     * is created. The ID is an 8-byte array. An ID with all zeroes is considered
     * invalid.
     * This field is semantically required. Receiver should generate new
     * random span_id if empty or invalid span_id was received.
     * This field is required.
     *
     * Generated from protobuf field <code>bytes span_id = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setSpanId($var)
    {
        GPBUtil::checkString($var, False);
        $this->span_id = $var;

        return $this;
    }

    /**
     * The Tracestate on the span.
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.Span.Tracestate tracestate = 15;</code>
     * @return \Opencensus\Proto\Trace\V1\Span\Tracestate
     */
    public function getTracestate()
    {
        return $this->tracestate;
    }

    /**
     * The Tracestate on the span.
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.Span.Tracestate tracestate = 15;</code>
     * @param \Opencensus\Proto\Trace\V1\Span\Tracestate $var
     * @return $this
     */
    public function setTracestate($var)
    {
        GPBUtil::checkMessage($var, \Opencensus\Proto\Trace\V1\Span_Tracestate::class);
        $this->tracestate = $var;

        return $this;
    }

    /**
     * The `span_id` of this span's parent span. If this is a root span, then this
     * field must be empty. The ID is an 8-byte array.
     *
     * Generated from protobuf field <code>bytes parent_span_id = 3;</code>
     * @return string
     */
    public function getParentSpanId()
    {
        return $this->parent_span_id;
    }

    /**
     * The `span_id` of this span's parent span. If this is a root span, then this
     * field must be empty. The ID is an 8-byte array.
     *
     * Generated from protobuf field <code>bytes parent_span_id = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setParentSpanId($var)
    {
        GPBUtil::checkString($var, False);
        $this->parent_span_id = $var;

        return $this;
    }

    /**
     * A description of the span's operation.
     * For example, the name can be a qualified method name or a file name
     * and a line number where the operation is called. A best practice is to use
     * the same display name at the same call point in an application.
     * This makes it easier to correlate spans in different traces.
     * This field is semantically required to be set to non-empty string.
     * When null or empty string received - receiver may use string "name"
     * as a replacement. There might be smarted algorithms implemented by
     * receiver to fix the empty span name.
     * This field is required.
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.TruncatableString name = 4;</code>
     * @return \Opencensus\Proto\Trace\V1\TruncatableString
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * A description of the span's operation.
     * For example, the name can be a qualified method name or a file name
     * and a line number where the operation is called. A best practice is to use
     * the same display name at the same call point in an application.
     * This makes it easier to correlate spans in different traces.
     * This field is semantically required to be set to non-empty string.
     * When null or empty string received - receiver may use string "name"
     * as a replacement. There might be smarted algorithms implemented by
     * receiver to fix the empty span name.
     * This field is required.
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.TruncatableString name = 4;</code>
     * @param \Opencensus\Proto\Trace\V1\TruncatableString $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkMessage($var, \Opencensus\Proto\Trace\V1\TruncatableString::class);
        $this->name = $var;

        return $this;
    }

    /**
     * Distinguishes between spans generated in a particular context. For example,
     * two spans with the same name may be distinguished using `CLIENT` (caller)
     * and `SERVER` (callee) to identify queueing latency associated with the span.
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.Span.SpanKind kind = 14;</code>
     * @return int
     */
    public function getKind()
    {
        return $this->kind;
    }

    /**
     * Distinguishes between spans generated in a particular context. For example,
     * two spans with the same name may be distinguished using `CLIENT` (caller)
     * and `SERVER` (callee) to identify queueing latency associated with the span.
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.Span.SpanKind kind = 14;</code>
     * @param int $var
     * @return $this
     */
    public function setKind($var)
    {
        GPBUtil::checkEnum($var, \Opencensus\Proto\Trace\V1\Span_SpanKind::class);
        $this->kind = $var;

        return $this;
    }

    /**
     * The start time of the span. On the client side, this is the time kept by
     * the local machine where the span execution starts. On the server side, this
     * is the time when the server's application handler starts running.
     * This field is semantically required. When not set on receive -
     * receiver should set it to the value of end_time field if it was
     * set. Or to the current time if neither was set. It is important to
     * keep end_time > start_time for consistency.
     * This field is required.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp start_time = 5;</code>
     * @return \Google\Protobuf\Timestamp
     */
    public function getStartTime()
    {
        return $this->start_time;
    }

    /**
     * The start time of the span. On the client side, this is the time kept by
     * the local machine where the span execution starts. On the server side, this
     * is the time when the server's application handler starts running.
     * This field is semantically required. When not set on receive -
     * receiver should set it to the value of end_time field if it was
     * set. Or to the current time if neither was set. It is important to
     * keep end_time > start_time for consistency.
     * This field is required.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp start_time = 5;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setStartTime($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->start_time = $var;

        return $this;
    }

    /**
     * The end time of the span. On the client side, this is the time kept by
     * the local machine where the span execution ends. On the server side, this
     * is the time when the server application handler stops running.
     * This field is semantically required. When not set on receive -
     * receiver should set it to start_time value. It is important to
     * keep end_time > start_time for consistency.
     * This field is required.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp end_time = 6;</code>
     * @return \Google\Protobuf\Timestamp
     */
    public function getEndTime()
    {
        return $this->end_time;
    }

    /**
     * The end time of the span. On the client side, this is the time kept by
     * the local machine where the span execution ends. On the server side, this
     * is the time when the server application handler stops running.
     * This field is semantically required. When not set on receive -
     * receiver should set it to start_time value. It is important to
     * keep end_time > start_time for consistency.
     * This field is required.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp end_time = 6;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setEndTime($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->end_time = $var;

        return $this;
    }

    /**
     * A set of attributes on the span.
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 7;</code>
     * @return \Opencensus\Proto\Trace\V1\Span\Attributes
     */
    public function getAttributes()
    {
        return $this->attributes;
    }

    /**
     * A set of attributes on the span.
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 7;</code>
     * @param \Opencensus\Proto\Trace\V1\Span\Attributes $var
     * @return $this
     */
    public function setAttributes($var)
    {
        GPBUtil::checkMessage($var, \Opencensus\Proto\Trace\V1\Span_Attributes::class);
        $this->attributes = $var;

        return $this;
    }

    /**
     * A stack trace captured at the start of the span.
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.StackTrace stack_trace = 8;</code>
     * @return \Opencensus\Proto\Trace\V1\StackTrace
     */
    public function getStackTrace()
    {
        return $this->stack_trace;
    }

    /**
     * A stack trace captured at the start of the span.
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.StackTrace stack_trace = 8;</code>
     * @param \Opencensus\Proto\Trace\V1\StackTrace $var
     * @return $this
     */
    public function setStackTrace($var)
    {
        GPBUtil::checkMessage($var, \Opencensus\Proto\Trace\V1\StackTrace::class);
        $this->stack_trace = $var;

        return $this;
    }

    /**
     * The included time events.
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.Span.TimeEvents time_events = 9;</code>
     * @return \Opencensus\Proto\Trace\V1\Span\TimeEvents
     */
    public function getTimeEvents()
    {
        return $this->time_events;
    }

    /**
     * The included time events.
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.Span.TimeEvents time_events = 9;</code>
     * @param \Opencensus\Proto\Trace\V1\Span\TimeEvents $var
     * @return $this
     */
    public function setTimeEvents($var)
    {
        GPBUtil::checkMessage($var, \Opencensus\Proto\Trace\V1\Span_TimeEvents::class);
        $this->time_events = $var;

        return $this;
    }

    /**
     * The included links.
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.Span.Links links = 10;</code>
     * @return \Opencensus\Proto\Trace\V1\Span\Links
     */
    public function getLinks()
    {
        return $this->links;
    }

    /**
     * The included links.
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.Span.Links links = 10;</code>
     * @param \Opencensus\Proto\Trace\V1\Span\Links $var
     * @return $this
     */
    public function setLinks($var)
    {
        GPBUtil::checkMessage($var, \Opencensus\Proto\Trace\V1\Span_Links::class);
        $this->links = $var;

        return $this;
    }

    /**
     * An optional final status for this span. Semantically when Status
     * wasn't set it is means span ended without errors and assume
     * Status.Ok (code = 0).
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.Status status = 11;</code>
     * @return \Opencensus\Proto\Trace\V1\Status
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * An optional final status for this span. Semantically when Status
     * wasn't set it is means span ended without errors and assume
     * Status.Ok (code = 0).
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.Status status = 11;</code>
     * @param \Opencensus\Proto\Trace\V1\Status $var
     * @return $this
     */
    public function setStatus($var)
    {
        GPBUtil::checkMessage($var, \Opencensus\Proto\Trace\V1\Status::class);
        $this->status = $var;

        return $this;
    }

    /**
     * An optional resource that is associated with this span. If not set, this span 
     * should be part of a batch that does include the resource information, unless resource 
     * information is unknown.
     *
     * Generated from protobuf field <code>.opencensus.proto.resource.v1.Resource resource = 16;</code>
     * @return \Opencensus\Proto\Resource\V1\Resource
     */
    public function getResource()
    {
        return $this->resource;
    }

    /**
     * An optional resource that is associated with this span. If not set, this span 
     * should be part of a batch that does include the resource information, unless resource 
     * information is unknown.
     *
     * Generated from protobuf field <code>.opencensus.proto.resource.v1.Resource resource = 16;</code>
     * @param \Opencensus\Proto\Resource\V1\Resource $var
     * @return $this
     */
    public function setResource($var)
    {
        GPBUtil::checkMessage($var, \Opencensus\Proto\Resource\V1\Resource::class);
        $this->resource = $var;

        return $this;
    }

    /**
     * A highly recommended but not required flag that identifies when a
     * trace crosses a process boundary. True when the parent_span belongs
     * to the same process as the current span. This flag is most commonly
     * used to indicate the need to adjust time as clocks in different
     * processes may not be synchronized.
     *
     * Generated from protobuf field <code>.google.protobuf.BoolValue same_process_as_parent_span = 12;</code>
     * @return \Google\Protobuf\BoolValue
     */
    public function getSameProcessAsParentSpan()
    {
        return $this->same_process_as_parent_span;
    }

    /**
     * Returns the unboxed value from <code>getSameProcessAsParentSpan()</code>

     * A highly recommended but not required flag that identifies when a
     * trace crosses a process boundary. True when the parent_span belongs
     * to the same process as the current span. This flag is most commonly
     * used to indicate the need to adjust time as clocks in different
     * processes may not be synchronized.
     *
     * Generated from protobuf field <code>.google.protobuf.BoolValue same_process_as_parent_span = 12;</code>
     * @return bool|null
     */
    public function getSameProcessAsParentSpanUnwrapped()
    {
        $wrapper = $this->getSameProcessAsParentSpan();
        return is_null($wrapper) ? null : $wrapper->getValue();
    }

    /**
     * A highly recommended but not required flag that identifies when a
     * trace crosses a process boundary. True when the parent_span belongs
     * to the same process as the current span. This flag is most commonly
     * used to indicate the need to adjust time as clocks in different
     * processes may not be synchronized.
     *
     * Generated from protobuf field <code>.google.protobuf.BoolValue same_process_as_parent_span = 12;</code>
     * @param \Google\Protobuf\BoolValue $var
     * @return $this
     */
    public function setSameProcessAsParentSpan($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\BoolValue::class);
        $this->same_process_as_parent_span = $var;

        return $this;
    }

    /**
     * Sets the field by wrapping a primitive type in a Google\Protobuf\BoolValue object.

     * A highly recommended but not required flag that identifies when a
     * trace crosses a process boundary. True when the parent_span belongs
     * to the same process as the current span. This flag is most commonly
     * used to indicate the need to adjust time as clocks in different
     * processes may not be synchronized.
     *
     * Generated from protobuf field <code>.google.protobuf.BoolValue same_process_as_parent_span = 12;</code>
     * @param bool|null $var
     * @return $this
     */
    public function setSameProcessAsParentSpanUnwrapped($var)
    {
        $wrappedVar = is_null($var) ? null : new \Google\Protobuf\BoolValue(['value' => $var]);
        return $this->setSameProcessAsParentSpan($wrappedVar);
    }

    /**
     * An optional number of child spans that were generated while this span
     * was active. If set, allows an implementation to detect missing child spans.
     *
     * Generated from protobuf field <code>.google.protobuf.UInt32Value child_span_count = 13;</code>
     * @return \Google\Protobuf\UInt32Value
     */
    public function getChildSpanCount()
    {
        return $this->child_span_count;
    }

    /**
     * Returns the unboxed value from <code>getChildSpanCount()</code>

     * An optional number of child spans that were generated while this span
     * was active. If set, allows an implementation to detect missing child spans.
     *
     * Generated from protobuf field <code>.google.protobuf.UInt32Value child_span_count = 13;</code>
     * @return int|null
     */
    public function getChildSpanCountUnwrapped()
    {
        $wrapper = $this->getChildSpanCount();
        return is_null($wrapper) ? null : $wrapper->getValue();
    }

    /**
     * An optional number of child spans that were generated while this span
     * was active. If set, allows an implementation to detect missing child spans.
     *
     * Generated from protobuf field <code>.google.protobuf.UInt32Value child_span_count = 13;</code>
     * @param \Google\Protobuf\UInt32Value $var
     * @return $this
     */
    public function setChildSpanCount($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\UInt32Value::class);
        $this->child_span_count = $var;

        return $this;
    }

    /**
     * Sets the field by wrapping a primitive type in a Google\Protobuf\UInt32Value object.

     * An optional number of child spans that were generated while this span
     * was active. If set, allows an implementation to detect missing child spans.
     *
     * Generated from protobuf field <code>.google.protobuf.UInt32Value child_span_count = 13;</code>
     * @param int|null $var
     * @return $this
     */
    public function setChildSpanCountUnwrapped($var)
    {
        $wrappedVar = is_null($var) ? null : new \Google\Protobuf\UInt32Value(['value' => $var]);
        return $this->setChildSpanCount($wrappedVar);
    }

}

