<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: opencensus/proto/stats/v1/stats.proto

namespace Opencensus\Proto\Stats\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>opencensus.proto.stats.v1.View</code>
 */
class View extends \Google\Protobuf\Internal\Message
{
    /**
     * A string by which the View will be referred to, e.g. "rpc_latency". Names MUST be unique
     * within the library.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     */
    private $name = '';
    /**
     * Describes the view, e.g. "RPC latency distribution"
     *
     * Generated from protobuf field <code>string description = 2;</code>
     */
    private $description = '';
    /**
     * The Measure to which this view is applied.
     *
     * Generated from protobuf field <code>.opencensus.proto.stats.v1.Measure measure = 3;</code>
     */
    private $measure = null;
    /**
     * An array of tag keys. These values associated with tags of this name form the basis by which
     * individual stats will be aggregated (one aggregation per unique tag value). If none are
     * provided, then all data is recorded in a single aggregation.
     *
     * Generated from protobuf field <code>repeated string columns = 4;</code>
     */
    private $columns;
    protected $aggregation;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $name
     *           A string by which the View will be referred to, e.g. "rpc_latency". Names MUST be unique
     *           within the library.
     *     @type string $description
     *           Describes the view, e.g. "RPC latency distribution"
     *     @type \Opencensus\Proto\Stats\V1\Measure $measure
     *           The Measure to which this view is applied.
     *     @type string[]|\Google\Protobuf\Internal\RepeatedField $columns
     *           An array of tag keys. These values associated with tags of this name form the basis by which
     *           individual stats will be aggregated (one aggregation per unique tag value). If none are
     *           provided, then all data is recorded in a single aggregation.
     *     @type \Opencensus\Proto\Stats\V1\CountAggregation $count_aggregation
     *           Counts the number of measurements recorded.
     *     @type \Opencensus\Proto\Stats\V1\SumAggregation $sum_aggregation
     *           Indicates that data collected and aggregated with this Aggregation will be summed up.
     *     @type \Opencensus\Proto\Stats\V1\LastValueAggregation $last_value_aggregation
     *           Indicates that data collected and aggregated with this Aggregation will represent the last
     *           recorded value. This is useful to support Gauges.
     *     @type \Opencensus\Proto\Stats\V1\DistributionAggregation $distribution_aggregation
     *           Indicates that the desired Aggregation is a histogram distribution. A distribution
     *           Aggregation may contain a histogram of the values in the population. User should define the
     *           bucket boundaries for that histogram (see DistributionAggregation).
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Opencensus\Proto\Stats\V1\Stats::initOnce();
        parent::__construct($data);
    }

    /**
     * A string by which the View will be referred to, e.g. "rpc_latency". Names MUST be unique
     * within the library.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * A string by which the View will be referred to, e.g. "rpc_latency". Names MUST be unique
     * within the library.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * Describes the view, e.g. "RPC latency distribution"
     *
     * Generated from protobuf field <code>string description = 2;</code>
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Describes the view, e.g. "RPC latency distribution"
     *
     * Generated from protobuf field <code>string description = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setDescription($var)
    {
        GPBUtil::checkString($var, True);
        $this->description = $var;

        return $this;
    }

    /**
     * The Measure to which this view is applied.
     *
     * Generated from protobuf field <code>.opencensus.proto.stats.v1.Measure measure = 3;</code>
     * @return \Opencensus\Proto\Stats\V1\Measure
     */
    public function getMeasure()
    {
        return $this->measure;
    }

    /**
     * The Measure to which this view is applied.
     *
     * Generated from protobuf field <code>.opencensus.proto.stats.v1.Measure measure = 3;</code>
     * @param \Opencensus\Proto\Stats\V1\Measure $var
     * @return $this
     */
    public function setMeasure($var)
    {
        GPBUtil::checkMessage($var, \Opencensus\Proto\Stats\V1\Measure::class);
        $this->measure = $var;

        return $this;
    }

    /**
     * An array of tag keys. These values associated with tags of this name form the basis by which
     * individual stats will be aggregated (one aggregation per unique tag value). If none are
     * provided, then all data is recorded in a single aggregation.
     *
     * Generated from protobuf field <code>repeated string columns = 4;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getColumns()
    {
        return $this->columns;
    }

    /**
     * An array of tag keys. These values associated with tags of this name form the basis by which
     * individual stats will be aggregated (one aggregation per unique tag value). If none are
     * provided, then all data is recorded in a single aggregation.
     *
     * Generated from protobuf field <code>repeated string columns = 4;</code>
     * @param string[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setColumns($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->columns = $arr;

        return $this;
    }

    /**
     * Counts the number of measurements recorded.
     *
     * Generated from protobuf field <code>.opencensus.proto.stats.v1.CountAggregation count_aggregation = 5;</code>
     * @return \Opencensus\Proto\Stats\V1\CountAggregation
     */
    public function getCountAggregation()
    {
        return $this->readOneof(5);
    }

    /**
     * Counts the number of measurements recorded.
     *
     * Generated from protobuf field <code>.opencensus.proto.stats.v1.CountAggregation count_aggregation = 5;</code>
     * @param \Opencensus\Proto\Stats\V1\CountAggregation $var
     * @return $this
     */
    public function setCountAggregation($var)
    {
        GPBUtil::checkMessage($var, \Opencensus\Proto\Stats\V1\CountAggregation::class);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     * Indicates that data collected and aggregated with this Aggregation will be summed up.
     *
     * Generated from protobuf field <code>.opencensus.proto.stats.v1.SumAggregation sum_aggregation = 6;</code>
     * @return \Opencensus\Proto\Stats\V1\SumAggregation
     */
    public function getSumAggregation()
    {
        return $this->readOneof(6);
    }

    /**
     * Indicates that data collected and aggregated with this Aggregation will be summed up.
     *
     * Generated from protobuf field <code>.opencensus.proto.stats.v1.SumAggregation sum_aggregation = 6;</code>
     * @param \Opencensus\Proto\Stats\V1\SumAggregation $var
     * @return $this
     */
    public function setSumAggregation($var)
    {
        GPBUtil::checkMessage($var, \Opencensus\Proto\Stats\V1\SumAggregation::class);
        $this->writeOneof(6, $var);

        return $this;
    }

    /**
     * Indicates that data collected and aggregated with this Aggregation will represent the last
     * recorded value. This is useful to support Gauges.
     *
     * Generated from protobuf field <code>.opencensus.proto.stats.v1.LastValueAggregation last_value_aggregation = 7;</code>
     * @return \Opencensus\Proto\Stats\V1\LastValueAggregation
     */
    public function getLastValueAggregation()
    {
        return $this->readOneof(7);
    }

    /**
     * Indicates that data collected and aggregated with this Aggregation will represent the last
     * recorded value. This is useful to support Gauges.
     *
     * Generated from protobuf field <code>.opencensus.proto.stats.v1.LastValueAggregation last_value_aggregation = 7;</code>
     * @param \Opencensus\Proto\Stats\V1\LastValueAggregation $var
     * @return $this
     */
    public function setLastValueAggregation($var)
    {
        GPBUtil::checkMessage($var, \Opencensus\Proto\Stats\V1\LastValueAggregation::class);
        $this->writeOneof(7, $var);

        return $this;
    }

    /**
     * Indicates that the desired Aggregation is a histogram distribution. A distribution
     * Aggregation may contain a histogram of the values in the population. User should define the
     * bucket boundaries for that histogram (see DistributionAggregation).
     *
     * Generated from protobuf field <code>.opencensus.proto.stats.v1.DistributionAggregation distribution_aggregation = 8;</code>
     * @return \Opencensus\Proto\Stats\V1\DistributionAggregation
     */
    public function getDistributionAggregation()
    {
        return $this->readOneof(8);
    }

    /**
     * Indicates that the desired Aggregation is a histogram distribution. A distribution
     * Aggregation may contain a histogram of the values in the population. User should define the
     * bucket boundaries for that histogram (see DistributionAggregation).
     *
     * Generated from protobuf field <code>.opencensus.proto.stats.v1.DistributionAggregation distribution_aggregation = 8;</code>
     * @param \Opencensus\Proto\Stats\V1\DistributionAggregation $var
     * @return $this
     */
    public function setDistributionAggregation($var)
    {
        GPBUtil::checkMessage($var, \Opencensus\Proto\Stats\V1\DistributionAggregation::class);
        $this->writeOneof(8, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getAggregation()
    {
        return $this->whichOneof("aggregation");
    }

}

