<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: opencensus/proto/trace/v1/trace.proto

namespace Opencensus\Proto\Trace\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * The call stack which originated this span.
 *
 * Generated from protobuf message <code>opencensus.proto.trace.v1.StackTrace</code>
 */
class StackTrace extends \Google\Protobuf\Internal\Message
{
    /**
     * Stack frames in this stack trace.
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.StackTrace.StackFrames stack_frames = 1;</code>
     */
    private $stack_frames = null;
    /**
     * The hash ID is used to conserve network bandwidth for duplicate
     * stack traces within a single trace.
     * Often multiple spans will have identical stack traces.
     * The first occurrence of a stack trace should contain both
     * `stack_frames` and a value in `stack_trace_hash_id`.
     * Subsequent spans within the same request can refer
     * to that stack trace by setting only `stack_trace_hash_id`.
     * TODO: describe how to deal with the case where stack_trace_hash_id is
     * zero because it was not set.
     *
     * Generated from protobuf field <code>uint64 stack_trace_hash_id = 2;</code>
     */
    private $stack_trace_hash_id = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Opencensus\Proto\Trace\V1\StackTrace\StackFrames $stack_frames
     *           Stack frames in this stack trace.
     *     @type int|string $stack_trace_hash_id
     *           The hash ID is used to conserve network bandwidth for duplicate
     *           stack traces within a single trace.
     *           Often multiple spans will have identical stack traces.
     *           The first occurrence of a stack trace should contain both
     *           `stack_frames` and a value in `stack_trace_hash_id`.
     *           Subsequent spans within the same request can refer
     *           to that stack trace by setting only `stack_trace_hash_id`.
     *           TODO: describe how to deal with the case where stack_trace_hash_id is
     *           zero because it was not set.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Opencensus\Proto\Trace\V1\Trace::initOnce();
        parent::__construct($data);
    }

    /**
     * Stack frames in this stack trace.
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.StackTrace.StackFrames stack_frames = 1;</code>
     * @return \Opencensus\Proto\Trace\V1\StackTrace\StackFrames
     */
    public function getStackFrames()
    {
        return $this->stack_frames;
    }

    /**
     * Stack frames in this stack trace.
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.StackTrace.StackFrames stack_frames = 1;</code>
     * @param \Opencensus\Proto\Trace\V1\StackTrace\StackFrames $var
     * @return $this
     */
    public function setStackFrames($var)
    {
        GPBUtil::checkMessage($var, \Opencensus\Proto\Trace\V1\StackTrace_StackFrames::class);
        $this->stack_frames = $var;

        return $this;
    }

    /**
     * The hash ID is used to conserve network bandwidth for duplicate
     * stack traces within a single trace.
     * Often multiple spans will have identical stack traces.
     * The first occurrence of a stack trace should contain both
     * `stack_frames` and a value in `stack_trace_hash_id`.
     * Subsequent spans within the same request can refer
     * to that stack trace by setting only `stack_trace_hash_id`.
     * TODO: describe how to deal with the case where stack_trace_hash_id is
     * zero because it was not set.
     *
     * Generated from protobuf field <code>uint64 stack_trace_hash_id = 2;</code>
     * @return int|string
     */
    public function getStackTraceHashId()
    {
        return $this->stack_trace_hash_id;
    }

    /**
     * The hash ID is used to conserve network bandwidth for duplicate
     * stack traces within a single trace.
     * Often multiple spans will have identical stack traces.
     * The first occurrence of a stack trace should contain both
     * `stack_frames` and a value in `stack_trace_hash_id`.
     * Subsequent spans within the same request can refer
     * to that stack trace by setting only `stack_trace_hash_id`.
     * TODO: describe how to deal with the case where stack_trace_hash_id is
     * zero because it was not set.
     *
     * Generated from protobuf field <code>uint64 stack_trace_hash_id = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setStackTraceHashId($var)
    {
        GPBUtil::checkUint64($var);
        $this->stack_trace_hash_id = $var;

        return $this;
    }

}

