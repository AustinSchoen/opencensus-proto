<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: opencensus/proto/trace/v1/trace.proto

namespace Opencensus\Proto\Trace\V1\Span;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * A pointer from the current span to another span in the same trace or in a
 * different trace. For example, this can be used in batching operations,
 * where a single batch handler processes multiple requests from different
 * traces or when the handler receives a request from a different project.
 *
 * Generated from protobuf message <code>opencensus.proto.trace.v1.Span.Link</code>
 */
class Link extends \Google\Protobuf\Internal\Message
{
    /**
     * A unique identifier of a trace that this linked span is part of. The ID is a 
     * 16-byte array.
     *
     * Generated from protobuf field <code>bytes trace_id = 1;</code>
     */
    private $trace_id = '';
    /**
     * A unique identifier for the linked span. The ID is an 8-byte array.
     *
     * Generated from protobuf field <code>bytes span_id = 2;</code>
     */
    private $span_id = '';
    /**
     * The relationship of the current span relative to the linked span.
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.Span.Link.Type type = 3;</code>
     */
    private $type = 0;
    /**
     * A set of attributes on the link.
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 4;</code>
     */
    private $attributes = null;
    /**
     * The Tracestate associated with the link.
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.Span.Tracestate tracestate = 5;</code>
     */
    private $tracestate = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $trace_id
     *           A unique identifier of a trace that this linked span is part of. The ID is a 
     *           16-byte array.
     *     @type string $span_id
     *           A unique identifier for the linked span. The ID is an 8-byte array.
     *     @type int $type
     *           The relationship of the current span relative to the linked span.
     *     @type \Opencensus\Proto\Trace\V1\Span\Attributes $attributes
     *           A set of attributes on the link.
     *     @type \Opencensus\Proto\Trace\V1\Span\Tracestate $tracestate
     *           The Tracestate associated with the link.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Opencensus\Proto\Trace\V1\Trace::initOnce();
        parent::__construct($data);
    }

    /**
     * A unique identifier of a trace that this linked span is part of. The ID is a 
     * 16-byte array.
     *
     * Generated from protobuf field <code>bytes trace_id = 1;</code>
     * @return string
     */
    public function getTraceId()
    {
        return $this->trace_id;
    }

    /**
     * A unique identifier of a trace that this linked span is part of. The ID is a 
     * 16-byte array.
     *
     * Generated from protobuf field <code>bytes trace_id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setTraceId($var)
    {
        GPBUtil::checkString($var, False);
        $this->trace_id = $var;

        return $this;
    }

    /**
     * A unique identifier for the linked span. The ID is an 8-byte array.
     *
     * Generated from protobuf field <code>bytes span_id = 2;</code>
     * @return string
     */
    public function getSpanId()
    {
        return $this->span_id;
    }

    /**
     * A unique identifier for the linked span. The ID is an 8-byte array.
     *
     * Generated from protobuf field <code>bytes span_id = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setSpanId($var)
    {
        GPBUtil::checkString($var, False);
        $this->span_id = $var;

        return $this;
    }

    /**
     * The relationship of the current span relative to the linked span.
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.Span.Link.Type type = 3;</code>
     * @return int
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * The relationship of the current span relative to the linked span.
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.Span.Link.Type type = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setType($var)
    {
        GPBUtil::checkEnum($var, \Opencensus\Proto\Trace\V1\Span_Link_Type::class);
        $this->type = $var;

        return $this;
    }

    /**
     * A set of attributes on the link.
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 4;</code>
     * @return \Opencensus\Proto\Trace\V1\Span\Attributes
     */
    public function getAttributes()
    {
        return $this->attributes;
    }

    /**
     * A set of attributes on the link.
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 4;</code>
     * @param \Opencensus\Proto\Trace\V1\Span\Attributes $var
     * @return $this
     */
    public function setAttributes($var)
    {
        GPBUtil::checkMessage($var, \Opencensus\Proto\Trace\V1\Span_Attributes::class);
        $this->attributes = $var;

        return $this;
    }

    /**
     * The Tracestate associated with the link.
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.Span.Tracestate tracestate = 5;</code>
     * @return \Opencensus\Proto\Trace\V1\Span\Tracestate
     */
    public function getTracestate()
    {
        return $this->tracestate;
    }

    /**
     * The Tracestate associated with the link.
     *
     * Generated from protobuf field <code>.opencensus.proto.trace.v1.Span.Tracestate tracestate = 5;</code>
     * @param \Opencensus\Proto\Trace\V1\Span\Tracestate $var
     * @return $this
     */
    public function setTracestate($var)
    {
        GPBUtil::checkMessage($var, \Opencensus\Proto\Trace\V1\Span_Tracestate::class);
        $this->tracestate = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Link::class, \Opencensus\Proto\Trace\V1\Span_Link::class);

